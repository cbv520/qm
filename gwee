package mux41;

import lombok.AllArgsConstructor;
import lombok.Data;
import org.apache.jena.graph.Graph;
import org.apache.jena.graph.Node;
import org.apache.jena.graph.Triple;
import org.apache.jena.query.Query;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.rdf.model.ResourceFactory;
import org.apache.jena.sparql.ARQConstants;
import org.apache.jena.sparql.algebra.Algebra;
import org.apache.jena.sparql.core.DatasetGraphFactory;
import org.apache.jena.sparql.core.PathBlock;
import org.apache.jena.sparql.core.TriplePath;
import org.apache.jena.sparql.core.Var;
import org.apache.jena.sparql.engine.ExecutionContext;
import org.apache.jena.sparql.engine.binding.Binding;
import org.apache.jena.sparql.engine.binding.BindingBuilder;
import org.apache.jena.sparql.engine.binding.BindingRoot;
import org.apache.jena.sparql.engine.main.VarFinder;
import org.apache.jena.sparql.graph.GraphFactory;
import org.apache.jena.sparql.path.PathLib;
import org.apache.jena.sparql.syntax.Element;
import org.apache.jena.sparql.syntax.ElementGroup;
import org.apache.jena.sparql.syntax.ElementOptional;
import org.apache.jena.sparql.syntax.ElementPathBlock;
import org.apache.jena.vocabulary.RDF;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Test3 {

    @Data
    @AllArgsConstructor
    public static class MatchResult {
        private double coverage;
        private Model model;
        private Map<Node, Var> binding;
        private Map<String, Object> literalBindings;

        @Override
        public String toString() {
            return "MatchResult{" +
                    "coverage=" + coverage +
                    ", model=" + serialize(model) +
                    ", binding=" + binding +
                    ", literalBindings=" + literalBindings +
                    '}';
        }
    }

    public static MatchResult match(Query query, Model data, List<TriplePath> tps, List<TriplePath> gtps, Map<Var, Object> literalBindings) {
        var dataClasses = getRdfClasses(data);
        var queryClasses = getAcceptedRdfClasses(query);
        var ctx = createExecutionContext(data);
        var bindingSets = getPossibleBindings(tps, ctx, queryClasses, dataClasses);
        System.out.println(bindingSets);
        //var bopt = optimise(bindingSets, queryClasses, dataClasses);
        System.out.println(bindingSets);
        var best = getBestCoverage(gtps, bindingSets, data);
        System.out.println(best);
        return new MatchResult(best.getCoverage(), best.getModel(), best.getBinding(), getLiteralBindings(best.getBinding(), literalBindings));
    }

    public static Map<String, Object> getLiteralBindings(Map<Node, Var> binding, Map<Var, Object> literalBindings) {
        Map<String, Object> nodeToLiteralMapping = new HashMap<>();
        binding.forEach((node, var) -> {
            if (node.isURI()) {
                var val = literalBindings.get(var);
                if (val != null) {
                    nodeToLiteralMapping.put(node.getURI(), val);
                }
            }
        });
        return nodeToLiteralMapping;
    }

    public static Query processQuery(
            Query query,
            List<TriplePath> queryTriples,
            List<TriplePath> groundedQueryTriples,
            Map<Var, Object> literalBindings,
            Map<Var, Set<String>> acceptedRdfClasses) {
        String varSuffix = "_" + UUID.randomUUID().toString().substring(24);
        Map<Node, Var> anonVarReplacements = new HashMap<>();

        var varFinder = VarFinder.process(Algebra.compile(query.getQueryPattern()));
        var varReplacementNames = varFinder.getFixed().stream()
                .collect(Collectors.toMap(
                        Var::asNode,
                        e -> Var.alloc(e.getVarName() + varSuffix).asNode()
                ));

        streamQueryTriplePaths(query)
                .map(tp -> renameVars(tp, varReplacementNames))
                .map(tp -> removeAnonVars(tp, anonVarReplacements))
                .map(tp -> replaceLiteral(tp, literalBindings))
                .forEach(tp -> {
                    queryTriples.add(tp);
                    groundedQueryTriples.add(groundTriplePath(tp));
                });

        query = QueryFactory.create();
        query.setQuerySelectType();
        query.setQueryResultStar(true);
        var el = new ElementGroup();
        query.setQueryPattern(el);
        var pb = new PathBlock();
        queryTriples.forEach(pb::add);
        el.addElement(new ElementPathBlock(pb));

        acceptedRdfClasses.putAll(getAcceptedRdfClasses(query));

        return query;
    }

    public static Model alignData(Model data, Map<Node, Var> binding) {
        Map<Node, Node> dataToQueryMapping = new HashMap<>();
        binding.forEach((node, var) -> {
            dataToQueryMapping.put(node, ResourceFactory.createResource("http://vars#" + var.getName()).asNode());
        });
        var tAligned = data.getGraph().stream()
                .map(t -> new Triple(
                        replaceNode(t.getSubject(), dataToQueryMapping),
                        replaceNode(t.getPredicate(), dataToQueryMapping),
                        replaceNode(t.getObject(), dataToQueryMapping)
                ))
                .collect(Collectors.toList());
        Graph gAligned = GraphFactory.createDefaultGraph();
        tAligned.forEach(gAligned::add);
        return ModelFactory.createModelForGraph(gAligned);
    }

    public static CoverageResult getBestCoverage(List<TriplePath> gtps, Map<Node, Set<Var>> bindings, Model data) {
        int maxIters = 1000;
        var bindingIter = new BindingIter(bindings);
        double bestCoverage = -1;
        Map<Node, Var> bestBinding = null;
        Model bestData = null;
        int i = 0;
        while (bindingIter.hasNext()) {
            if (++i > maxIters) {
                break;
            }
            var binding = bindingIter.next();
            var alignedData = alignData(data, binding);
            var ctx = createExecutionContext(alignedData);
            var cvg = coverage(gtps, ctx);
            if (cvg == 1.0) {
                return new CoverageResult(binding, 1.0, alignedData);
            }
            if (cvg > bestCoverage) {
                bestCoverage = cvg;
                bestBinding = binding;
                bestData = alignedData;
            }
        }
        return new CoverageResult(bestBinding, bestCoverage, bestData);
    }

    public static double coverage(List<TriplePath> gtps, ExecutionContext ctx) {
        int matches = 0;
        for (var tp : gtps) {
            if (PathLib.execTriplePath(BindingRoot.create(), tp, ctx).hasNext()) {
                matches++;
            }
        }
        return (double) matches / gtps.size();
    }

    public static Map<Var, Set<String>> getAcceptedRdfClasses(Query query) {
        Map<Var, Set<String>> accepted = new HashMap<>();
        getQueryTriplePaths(query).forEach(tp -> {
            if (tp.getSubject().isVariable() && tp.getPredicate() != null && tp.getPredicate().equals(RDF.type.asNode()) && tp.getObject().isURI()) {
                var var = Var.alloc(tp.getSubject());
                accepted.putIfAbsent(var, new HashSet<>());
                accepted.get(var).add(tp.getObject().getURI());
            }
        });
        return accepted;
    }

    public static Map<String, String> getRdfClasses(Model data) {
        Map<String, String> accepted = new HashMap<>();
        data.getGraph().find(Node.ANY, RDF.type.asNode(), Node.ANY)
                .filterKeep(t -> t.getSubject().isURI() && t.getObject().isURI())
                .forEach(t -> accepted.put(t.getSubject().getURI(), t.getObject().getURI()));
        return accepted;
    }

    public static Map<Var, List<Node>> optimise(Map<Var, Set<Node>> bindings, Map<Var, Set<String>> accepted, Map<String, String> outputTypes) {
        Map<Var, List<Node>> optimised = bindings.entrySet().stream()
                .collect(Collectors.toMap(
                        Map.Entry::getKey,
                        e -> new ArrayList<>(e.getValue())));
        optimised.forEach((var, nodeList) -> {
            nodeList.sort(Comparator.comparing((Node node) ->
                    rdfClassCompare(var, node, accepted, outputTypes)).reversed());
        });
        return optimised;
    }

    private static int rdfClassCompare(Var var, Node node, Map<Var, Set<String>> accepted, Map<String, String> nodeTypes) {
        if (!node.isURI()) {
            return 0;
        }
        var nodeType = nodeTypes.get(node.getURI());
        if (nodeType == null) {
            return 0;
        } else {
            var acceptsTypes = accepted.get(var);
            if (acceptsTypes == null) {
                return 0;
            }
            if (acceptsTypes.contains(nodeType)) {
                return 1;
            } else {
                return -1;
            }
        }
    }

    public static ExecutionContext createExecutionContext(Model m) {
        return new ExecutionContext(DatasetGraphFactory.create(m.getGraph()));
    }

    public static Map<Node, Set<Var>> getPossibleBindings(List<TriplePath> tps, ExecutionContext ctx, Map<Var, Set<String>> accepted, Map<String, String> outputTypes) {
        Map<Node, Set<Var>> bindings = new HashMap<>();
        for (var tp : tps) {
            var qIter = PathLib.execTriplePath(BindingRoot.create(), tp, ctx);
            while (qIter.hasNext()) {
                var binding = qIter.next();
                binding.forEach((var, node) -> {
                    if (rdfClassCompare(var, node, accepted, outputTypes) >= 0) {
                        bindings.compute(node, (k, v) -> {
                            if (v == null) {
                                v = new HashSet<>();
                            }
                            v.add(var);
                            return v;
                        });
                    }
                });
            }
        }
        return bindings;
    }

    public static List<TriplePath> getQueryTriplePaths(Query query) {
        return streamQueryTriplePaths(query)
                .collect(Collectors.toList());
    }

    public static Stream<TriplePath> streamQueryTriplePaths(Query query) {
        return streamQueryPathBlocks(query)
                .flatMap(pb -> pb.getList().stream());
    }

    public static Stream<PathBlock> streamQueryPathBlocks(Query query) {
        return streamQueryPathBlocks(query.getQueryPattern());
    }

    public static Stream<PathBlock> streamQueryPathBlocks(Element el) {
        if (el instanceof ElementPathBlock) {
            return Stream.of(((ElementPathBlock) el).getPattern());
        }
        if (el instanceof ElementGroup) {
            return ((ElementGroup) el).getElements().stream()
                    .flatMap(Test3::streamQueryPathBlocks);
        }
        if (el instanceof ElementOptional) {
            return streamQueryPathBlocks(((ElementOptional) el).getOptionalElement());
        }
        return Stream.empty();
    }

    public static TriplePath removeAnonVars(TriplePath t, Map<Node, Var> anonVarReplacements) {
        if (t.isTriple()) {
            return new TriplePath(new Triple(
                    removeAnonVars(t.getSubject(), anonVarReplacements),
                    removeAnonVars(t.getPredicate(), anonVarReplacements),
                    removeAnonVars(t.getObject(), anonVarReplacements)
            ));
        } else {
            return new TriplePath(
                    removeAnonVars(t.getSubject(), anonVarReplacements),
                    t.getPath(),
                    removeAnonVars(t.getObject(), anonVarReplacements)
            );
        }
    }

    public static Node removeAnonVars(Node n, Map<Node, Var> anonVarReplacements) {
        if (n.isVariable() && n.getName().startsWith(ARQConstants.allocVarAnonMarker)) {
            var existingReplacement = anonVarReplacements.get(n);
            if (existingReplacement != null) {
                return existingReplacement;
            }
            var var = allocVar();
            anonVarReplacements.put(n, var);
            return var;
        }
        return n;
    }

    public static TriplePath replaceLiteral(TriplePath t, Map<Var, Object> literalBindings) {
        Node o = t.getObject();

        if (o.isLiteral()) {
            var literalValue = o.getLiteral().getValue();
            var var = literalBindings.entrySet().stream()
                    .filter(e -> e.getValue() != null && e.getValue().equals(literalValue))
                    .findAny()
                    .map(Map.Entry::getKey)
                    .orElseGet(QueryMatch::allocVar);
            literalBindings.put(var, literalValue);
            if (t.isTriple()) {
                return new TriplePath(new Triple(t.getSubject(), t.getPredicate(), var));
            } else {
                return new TriplePath(t.getSubject(), t.getPath(), var);
            }
        }

        return t;
    }

    private static TriplePath renameVars(TriplePath t, Map<Node, Node> replacements) {
        if (t.isTriple()) {
            return new TriplePath(new Triple(
                    replaceNode(t.getSubject(), replacements),
                    replaceNode(t.getPredicate(), replacements),
                    replaceNode(t.getObject(), replacements)));
        } else {
            return new TriplePath(
                replaceNode(t.getSubject(), replacements),
                t.getPath(),
                replaceNode(t.getObject(), replacements));
        }
    }

    public static TriplePath groundTriplePath(TriplePath tp) {
        if (tp.isTriple()) {
            return new TriplePath(new Triple(
                    groundVar(tp.getSubject()),
                    groundVar(tp.getPredicate()),
                    groundVar(tp.getObject())
            ));
        } else {
            return new TriplePath(
                    groundVar(tp.getSubject()),
                    tp.getPath(),
                    groundVar(tp.getObject())
            );
        }
    }

    public static Node groundVar(Node n) {
        if (n.isVariable()) {
            return ResourceFactory.createResource("http://vars#" + n.getName()).asNode();
        }
        return n;
    }

    private static Node replaceNode(Node n, Map<Node, Node> rename) {
        var newVar = rename.get(n);
        if (newVar != null) {
            return newVar;
        }
        return n;
    }

    public static Var allocVar() {
        return Var.alloc("var_" + UUID.randomUUID().toString().substring(24));
    }

    public static class BindingIter implements Iterator<Map<Node, Var>> {

        private final CartesianProduct cpIter;
        private final List<Node> nodes;
        private final List<List<Var>> vars;
        private final List<Map<Node, Var>> buffer;
        private final Random random = new Random(123);
        private Iterator<Map<Node, Var>> bufferIter;

        public BindingIter(Map<Node, Set<Var>> bindingSets) {
            this.nodes = new ArrayList<>(bindingSets.keySet());
            this.vars = bindingSets.values().stream().map(ArrayList::new).collect(Collectors.toList());
            this.buffer = new ArrayList<>();
            int[] lengths = new int[this.nodes.size()];
            for (int i = 0; i < this.nodes.size(); i++) {
                lengths[i] = vars.get(i).size();
            }
            this.cpIter = new CartesianProduct(lengths);
            bufferAndShuffle();
        }

        private void bufferAndShuffle() {
            buffer.clear();
            int n = 0;
            while (cpIter.hasNext() && n < 1000) {
                Map<Node, Var> binding = new HashMap<>();
                var next = cpIter.next();
                for (int i = 0; i < next.length; i++) {
                    binding.put(nodes.get(i), vars.get(i).get(next[i]));
                }
                buffer.add(binding);
                n++;
            }
            Collections.shuffle(buffer, random);
            bufferIter = buffer.iterator();
        }

        @Override
        public boolean hasNext() {
            if (!cpIter.hasNext() && !bufferIter.hasNext()) {
                return false;
            }
            if (!bufferIter.hasNext()) {
                bufferAndShuffle();
            }
            return bufferIter.hasNext();
        }

        @Override
        public Map<Node, Var> next() {
            return bufferIter.next();
        }
    }

    public static class CartesianProduct implements Iterable<int[]>, Iterator<int[]> {
        private final int[] _lengths;
        private final int[] _indices;
        private boolean _hasNext = true;

        public CartesianProduct(int[] lengths) {
            _lengths = lengths;
            _indices = new int[lengths.length];
        }

        public boolean hasNext() {
            return _hasNext;
        }

        public int[] next() {
            int[] result = Arrays.copyOf(_indices, _indices.length);
            for (int i = _indices.length - 1; i >= 0; i--) {
                if (_indices[i] == _lengths[i] - 1) {
                    _indices[i] = 0;
                    if (i == 0) {
                        _hasNext = false;
                    }
                } else {
                    _indices[i]++;
                    break;
                }
            }
            return result;
        }

        public Iterator<int[]> iterator() {
            return this;
        }

        public void remove() {
            throw new UnsupportedOperationException();
        }
    }

    @Data
    @AllArgsConstructor
    public static class CoverageResult {
        Map<Node, Var> binding;
        double coverage;
        Model model;
    }

    public static Model model(String str) {
        var model = ModelFactory.createDefaultModel();
        model.read(new ByteArrayInputStream(str.getBytes()), null, "TTL");
        return model;
    }

    public static String serialize(Model model) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        model.write(baos, "TTL", null);
        return baos.toString();
    }
}
